{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFLRNSHIV"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/drfitschemasqldf')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableSrc",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableTrgt",
								"type": "DatasetReference"
							},
							"name": "target"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableTrgt",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "sourcehash"
						},
						{
							"name": "targethash"
						},
						{
							"name": "Inserts"
						},
						{
							"name": "MarkedInserts"
						},
						{
							"name": "TrueUpdates"
						},
						{
							"name": "MarkedUpdates"
						},
						{
							"name": "Union1"
						},
						{
							"name": "FilterHash"
						}
					],
					"script": "parameters{\n\tprimarykey as string,\n\tcolumnnames as string,\n\tsourcetablename as string,\n\ttargettablename as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tpartitionBy('hash', 1)) ~> source1\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tpartitionBy('hash', 1)) ~> target\nsource1 derive(id_hash = byName($primarykey),\n\t\tcolumn_hash = md5(byNames(split($columnnames,','))),\n\tpartitionBy('hash', 1)) ~> sourcehash\ntarget derive(id_hash = byName($primarykey),\n\t\tcolumn_hash = md5(byNames(split($columnnames,','))),\n\tpartitionBy('hash', 1)) ~> targethash\nsourcehash, targethash exists(sourcehash@id_hash == targethash@id_hash,\n\tnegate:true,\n\tpartitionBy('hash', 1),\n\tbroadcast: 'auto')~> Inserts\nInserts alterRow(insertIf(true()),\n\tpartitionBy('hash', 1)) ~> MarkedInserts\nsourcehash, targethash exists(and(sourcehash@id_hash == targethash@id_hash ,sourcehash@column_hash!=targethash@column_hash),\n\tnegate:false,\n\tpartitionBy('hash', 1),\n\tbroadcast: 'auto')~> TrueUpdates\nTrueUpdates alterRow(updateIf(true()),\n\tpartitionBy('hash', 1)) ~> MarkedUpdates\nMarkedInserts, MarkedUpdates union(byName: true,\n\tpartitionBy('hash', 1))~> Union1\nUnion1 select(mapColumn(\n\t\teach(match(!in(['id_hash','column_hash'],name)))\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FilterHash\nFilterHash sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:[($primarykey)],\n\tformat: 'table',\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		}
	]
}